[0;34m[INFO][0m ðŸš€ Starting LinkOps Infrastructure Deployment
[0;34m[INFO][0m Checking prerequisites...
[0;32m[SUCCESS][0m All required tools are present
[0;34m[INFO][0m Checking Azure authentication...
[0;32m[SUCCESS][0m Authenticated to Azure
[0;34m[INFO][0m Subscription: Subscription 1 (e864a989-7282-4f8e-8ded-2b68911dcc95)
[0;34m[INFO][0m Initializing Terraform...
[0m[1mInitializing the backend...[0m
[0m[32m
Successfully configured the backend "azurerm"! Terraform will automatically
use this backend unless the backend configuration changes.[0m
[0m[1mInitializing provider plugins...[0m
- Finding hashicorp/azurerm versions matching "~> 3.70.0"...
- Finding latest version of hashicorp/kubernetes...
- Finding hashicorp/helm versions matching "~> 2.11.0"...
- Using previously-installed hashicorp/azurerm v3.70.0
- Using previously-installed hashicorp/kubernetes v2.37.1
- Using previously-installed hashicorp/helm v2.11.0

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[0;32m[SUCCESS][0m Terraform initialized
[0;34m[INFO][0m Planning Terraform deployment...
[0;34m[INFO][0m Checking for stale Terraform state lock...
Usage: terraform [global options] force-unlock LOCK_ID

  Manually unlock the state for the defined configuration.

  This will not modify your infrastructure. This command removes the lock on the
  state for the current workspace. The behavior of this lock is dependent
  on the backend being used. Local state files cannot be unlocked by another
  process.

Options:

  -force                 Don't ask for input for unlock confirmation.
Acquiring state lock. This may take a few moments...

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_kubernetes_cluster.main[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "main" {
      [32m+[0m[0m api_server_authorized_ip_ranges     = (known after apply)
      [32m+[0m[0m dns_prefix                          = "linkops"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m http_application_routing_zone_name  = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m image_cleaner_enabled               = false
      [32m+[0m[0m image_cleaner_interval_hours        = 48
      [32m+[0m[0m kube_admin_config                   = (sensitive value)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (sensitive value)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = (known after apply)
      [32m+[0m[0m location                            = "eastus"
      [32m+[0m[0m name                                = "linkops-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m node_resource_group_id              = (known after apply)
      [32m+[0m[0m oidc_issuer_url                     = (known after apply)
      [32m+[0m[0m portal_fqdn                         = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = false
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m public_network_access_enabled       = true
      [32m+[0m[0m resource_group_name                 = "linkops-rg"
      [32m+[0m[0m role_based_access_control_enabled   = true
      [32m+[0m[0m run_command_enabled                 = true
      [32m+[0m[0m sku_tier                            = "Free"
      [32m+[0m[0m tags                                = {
          [32m+[0m[0m "environment" = "linkops"
        }
      [32m+[0m[0m workload_identity_enabled           = false

      [32m+[0m[0m api_server_access_profile (known after apply)

      [32m+[0m[0m auto_scaler_profile (known after apply)

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "default"
          [32m+[0m[0m node_count           = 2
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m scale_down_mode      = "Delete"
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_DS2_v2"
          [32m+[0m[0m workload_runtime     = (known after apply)
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m kubelet_identity (known after apply)

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = "10.0.2.10"
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m ip_versions        = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "azure"
          [32m+[0m[0m network_policy     = "azure"
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m pod_cidrs          = (known after apply)
          [32m+[0m[0m service_cidr       = "10.0.2.0/24"
          [32m+[0m[0m service_cidrs      = (known after apply)

          [32m+[0m[0m load_balancer_profile (known after apply)

          [32m+[0m[0m nat_gateway_profile (known after apply)
        }

      [32m+[0m[0m oms_agent {
          [32m+[0m[0m log_analytics_workspace_id = (known after apply)
          [32m+[0m[0m oms_agent_identity         = (known after apply)
        }

      [32m+[0m[0m windows_profile (known after apply)
    }

[1m  # azurerm_kubernetes_cluster_node_pool.system[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster_node_pool" "system" {
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m kubelet_disk_type     = (known after apply)
      [32m+[0m[0m kubernetes_cluster_id = (known after apply)
      [32m+[0m[0m max_pods              = (known after apply)
      [32m+[0m[0m mode                  = "System"
      [32m+[0m[0m name                  = "systemnp"
      [32m+[0m[0m node_count            = 1
      [32m+[0m[0m node_labels           = (known after apply)
      [32m+[0m[0m orchestrator_version  = (known after apply)
      [32m+[0m[0m os_disk_size_gb       = (known after apply)
      [32m+[0m[0m os_disk_type          = "Managed"
      [32m+[0m[0m os_sku                = (known after apply)
      [32m+[0m[0m os_type               = "Linux"
      [32m+[0m[0m priority              = "Regular"
      [32m+[0m[0m scale_down_mode       = "Delete"
      [32m+[0m[0m spot_max_price        = -1
      [32m+[0m[0m ultra_ssd_enabled     = false
      [32m+[0m[0m vm_size               = "Standard_DS2_v2"
    }

[1m  # azurerm_log_analytics_workspace.main[0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_workspace" "main" {
      [32m+[0m[0m allow_resource_only_permissions = true
      [32m+[0m[0m daily_quota_gb                  = -1
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m internet_ingestion_enabled      = true
      [32m+[0m[0m internet_query_enabled          = true
      [32m+[0m[0m local_authentication_disabled   = false
      [32m+[0m[0m location                        = "eastus"
      [32m+[0m[0m name                            = "linkops-logs"
      [32m+[0m[0m primary_shared_key              = (sensitive value)
      [32m+[0m[0m resource_group_name             = "linkops-rg"
      [32m+[0m[0m retention_in_days               = 30
      [32m+[0m[0m secondary_shared_key            = (sensitive value)
      [32m+[0m[0m sku                             = "PerGB2018"
      [32m+[0m[0m tags                            = {
          [32m+[0m[0m "Environment" = "demo"
          [32m+[0m[0m "Project"     = "linkops"
        }
      [32m+[0m[0m workspace_id                    = (known after apply)
    }

[1m  # azurerm_resource_group.main[0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "main" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "eastus"
      [32m+[0m[0m name     = "linkops-rg"
    }

[1m  # azurerm_subnet.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "aks" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.0.1.0/24",
        ]
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "aks-subnet"
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = "linkops-rg"
      [32m+[0m[0m virtual_network_name                           = "linkops-vnet"
    }

[1m  # azurerm_virtual_network.main[0m will be created
[0m  [32m+[0m[0m resource "azurerm_virtual_network" "main" {
      [32m+[0m[0m address_space       = [
          [32m+[0m[0m "10.0.0.0/16",
        ]
      [32m+[0m[0m dns_servers         = (known after apply)
      [32m+[0m[0m guid                = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m location            = "eastus"
      [32m+[0m[0m name                = "linkops-vnet"
      [32m+[0m[0m resource_group_name = "linkops-rg"
      [32m+[0m[0m subnet              = (known after apply)
      [32m+[0m[0m tags                = {
          [32m+[0m[0m "Environment" = "demo"
          [32m+[0m[0m "Project"     = "linkops"
        }
    }

[1m  # helm_release.argocd[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "argocd" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "argo-cd"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = true
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "argocd"
      [32m+[0m[0m namespace                  = "argocd"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "https://argoproj.github.io/argo-helm"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m values                     = [
          [32m+[0m[0m <<-EOT
                server:
                  extraArgs:
                    - --insecure
                  ingress:
                    enabled: true
                    annotations:
                      kubernetes.io/ingress.class: nginx
                    hosts:
                      - argocd.local
                    tls:
                      - secretName: argocd-server-tls
                        hosts:
                          - argocd.local
                
                configs:
                  secret:
                    argocdServerAdminPassword: "$2a$10$mYaJ8KqQqQqQqQqQqQqQqO"
                
                rbac:
                  create: true
                
                repoServer:
                  serviceAccount:
                    create: true
                
                applicationSet:
                  enabled: true
            EOT,
        ]
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "5.51.6"
      [32m+[0m[0m wait                       = true
      [32m+[0m[0m wait_for_jobs              = false
    }

[1m  # helm_release.kube_prometheus_stack[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "kube_prometheus_stack" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "kube-prometheus-stack"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = true
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "kube-prometheus"
      [32m+[0m[0m namespace                  = "monitoring"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "https://prometheus-community.github.io/helm-charts"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m values                     = [
          [32m+[0m[0m <<-EOT
                grafana:
                  adminPassword: "${grafana_admin_password}"
                  service:
                    type: LoadBalancer
                
                prometheus:
                  service:
                    type: LoadBalancer
                
                alertmanager:
                  enabled: true
                  service:
                    type: LoadBalancer
            EOT,
        ]
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "55.5.0"
      [32m+[0m[0m wait                       = true
      [32m+[0m[0m wait_for_jobs              = false
    }

[1m  # helm_release.nginx_ingress[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "nginx_ingress" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "ingress-nginx"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = true
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "nginx-ingress"
      [32m+[0m[0m namespace                  = "ingress-nginx"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "https://kubernetes.github.io/ingress-nginx"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "4.12.3"
      [32m+[0m[0m wait                       = true
      [32m+[0m[0m wait_for_jobs              = false

      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.ingressClassResource.default"
          [32m+[0m[0m value = "true"
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.ingressClassResource.name"
          [32m+[0m[0m value = "nginx"
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.service.type"
          [32m+[0m[0m value = "LoadBalancer"
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
    }

[1mPlan:[0m 9 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m aks_cluster_fqdn    = (known after apply)
  [32m+[0m[0m aks_cluster_name    = "linkops-aks"
  [32m+[0m[0m aks_subnet_id       = (known after apply)
  [32m+[0m[0m client_certificate  = (sensitive value)
  [32m+[0m[0m kube_config_raw     = (sensitive value)
  [32m+[0m[0m resource_group_name = "linkops-rg"
  [32m+[0m[0m vnet_id             = (known after apply)
  [32m+[0m[0m vnet_name           = "linkops-vnet"
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
Releasing state lock. This may take a few moments...
[0;32m[SUCCESS][0m Terraform plan created
[1;33m[WARNING][0m Review the plan before applying

Proceed with deployment? (y/N): 
[0;34m[INFO][0m Applying Terraform deployment...
Acquiring state lock. This may take a few moments...
[0m[1mazurerm_resource_group.main: Creating...[0m[0m
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1mA resource with the ID "/subscriptions/e864a989-7282-4f8e-8ded-2b68911dcc95/resourceGroups/linkops-rg" already exists - to be managed via Terraform this resource needs to be imported into the State. Please see the resource documentation for "azurerm_resource_group" for more information.[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0m  with azurerm_resource_group.main,
[31mâ”‚[0m [0m  on main.tf line 2, in resource "azurerm_resource_group" "main":
[31mâ”‚[0m [0m   2: resource "azurerm_resource_group" "main" [4m{[0m[0m
[31mâ”‚[0m [0m
[31mâ•µ[0m[0m
Releasing state lock. This may take a few moments...
